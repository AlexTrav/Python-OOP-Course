<!DOCTYPE html>
<html><head>
	<!-- base href="https://proproprogs.ru/" -->
	<title>Концепция ООП простыми словами | Python ООП</title>
	<meta name="yandex-verification" content="dc612d99275111ce">
	<meta name="google-site-verification" content="dBeU07wRdu1RPn01tUx7i7POaYp6QVgQiuCLHWLHudM">
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<link rel="shortcut icon" href="https://proproprogs.ru/images/main.ico" type="image/x-icon">
	<script async="" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/tag.js"></script><script type="text/javascript" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/jquery-1.9.0.min.js"></script>
	<link rel="stylesheet" href="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/fonts.css">
	<link type="text/css" href="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/styles.css" rel="stylesheet">
	<link type="text/css" href="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/video.css" rel="stylesheet">
	<meta name="description" content="Что такое ООП? Зачем это нужно? Какие дает возможности? Все это подробно объясняется в данном видео! Узнаете о трех механизмах, лежащих в основе объектно-ориентированного программирования: инкапсуляции, наследовании и полиморфизме.">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
<script>
function onShowMobileMenu() {
	let m = $('#topmenu-toggle');
	if( m.is(":visible") ) m.hide();
	else m.show();
}
</script>

<table class="table-page" cellspacing="0" cellpadding="0" border="0">
<tbody><tr><td valign="top">
		<div class="header">
			<ul class="mainmenu-mobile">
			<li class="logo"><a href="https://proproprogs.ru/index.php"><div class="logo"></div></a></li>
			<li class="last"><a href="javascript:onShowMobileMenu()"><div class="mobile-menu-img"></div></a></li>
			</ul>

			<ul id="mainmenu" class="mainmenu">
			<li class="logo"><a href="https://proproprogs.ru/index.php"><div class="logo"></div></a></li>
			<li><a href="https://proproprogs.ru/python">Python</a></li><li><a href="https://proproprogs.ru/js">JavaScript</a></li><li><a href="https://proproprogs.ru/java">Java</a></li><li><a href="https://proproprogs.ru/data">Обработка данных</a></li><li><a href="https://proproprogs.ru/else">Еще</a></li>
			<li class="last"><a href="mailto:sc_lib@list.ru">sc_lib@list.ru</a></li>
			</ul>
			<div class="clear"></div>
		</div>
		<div class="topmenu-toggle" id="topmenu-toggle">
			<ul class="mobile-list"><li><a href="https://proproprogs.ru/python">Python</a></li><ul class="mobile-list-expand"><li><a href="https://proproprogs.ru/python_base">Основы Python</a></li><li><a href="https://proproprogs.ru/python_oop">Python ООП</a></li><li><a href="https://proproprogs.ru/wxpython">wxPython</a></li><li><a href="https://proproprogs.ru/modules">Модули</a></li><li><a href="https://proproprogs.ru/flask">Flask</a></li><li><a href="https://proproprogs.ru/django">Django</a></li></ul><li><a href="https://proproprogs.ru/js">JavaScript</a></li><ul class="mobile-list-expand"><li><a href="https://proproprogs.ru/javascript">Основы JavaScript</a></li><li><a href="https://proproprogs.ru/javascript_dom">JavaScript DOM</a></li><li><a href="https://proproprogs.ru/javascript_oop">JavaScript ООП</a></li></ul><li><a href="https://proproprogs.ru/java">Java</a></li><ul class="mobile-list-expand"><li><a href="https://proproprogs.ru/java_base">Основы Java</a></li><li><a href="https://proproprogs.ru/java_oop">Java ООП</a></li></ul><li><a href="https://proproprogs.ru/data">Обработка данных</a></li><ul class="mobile-list-expand"><li><a href="https://proproprogs.ru/neural_network">Нейронные сети</a></li><li><a href="https://proproprogs.ru/dsp">ЦОС</a></li><li><a href="https://proproprogs.ru/fractals">Фракталы</a></li><li><a href="https://proproprogs.ru/ga">Генетические алгоритмы</a></li><li><a href="https://proproprogs.ru/tensorflow">Tensorflow</a></li><li><a href="https://proproprogs.ru/ml">ML</a></li></ul><li><a href="https://proproprogs.ru/else">Еще</a></li><ul class="mobile-list-expand"><li><a href="https://proproprogs.ru/structure_data">Структуры данных</a></li></ul></ul>
		</div>
<!-- Yandex.Metrika counter -->
<script type="text/javascript">
   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
   m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

   ym(61572289, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
   });
</script>
<noscript><div><img src="https://mc.yandex.ru/watch/61572289" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->
<table class="table-content" cellspacing="0" cellpadding="0" border="0">
<tbody><tr><td class="left-chapters" valign="top">
	<ul id="leftchapters">
	<li>Свойства и методы класса</li>
	<li class="selected">Концепция ООП простыми словами</li><li><a href="https://proproprogs.ru/python_oop/klassy-i-obekty-atributy-klassov-i-obektov">Классы и объекты. Атрибуты классов и объектов</a></li><li><a href="https://proproprogs.ru/python_oop/metody-klassov-parametr-self">Методы классов. Параметр self</a></li><li><a href="https://proproprogs.ru/python_oop/inicializator-init-i-finalizator-del">Инициализатор __init__ и финализатор __del__</a></li><li><a href="https://proproprogs.ru/python_oop/magicheskiy-metod-new-primer-patterna-singleton">Магический метод __new__. Пример паттерна Singleton</a></li><li><a href="https://proproprogs.ru/python_oop/metody-klassa-classmethod-i-staticheskie-metody-staticmethod">Методы класса (classmethod) и статические методы (staticmethod)</a></li><li><a href="https://proproprogs.ru/python_oop/rezhimy-dostupa-public-private-protected-settery-i-gettery">Режимы доступа public, private, protected. Сеттеры и геттеры</a></li><li><a href="https://proproprogs.ru/python_oop/magicheskie-metody-setattr-getattribute-getattr-i-delattr">Магические методы __setattr__, __getattribute__, __getattr__ и __delattr__</a></li><li><a href="https://proproprogs.ru/python_oop/pattern-monosostoyanie">Паттерн моносостояние</a></li><li><a href="https://proproprogs.ru/python_oop/svoystva-property-dekorator-property">Свойства property. Декоратор @property</a></li><li><a href="https://proproprogs.ru/python_oop/primer-ispolzovaniya-obektov-property">Пример использования объектов property</a></li><li><a href="https://proproprogs.ru/python_oop/deskriptory-data-descriptor-i-non-data-descriptor">Дескрипторы (data descriptor и non-data descriptor)</a></li>
	<li class="share">
	<p>Поделиться</p>
	<a class="share-vk" href="https://vk.com/share.php?url=https://proproprogs.ru/python_oop/koncepciya-oop-prostymi-slovami" target="_blank" rel="nofollow"></a>
	<a class="share-tw" href="https://twitter.com/intent/tweet?url=https://proproprogs.ru/python_oop/koncepciya-oop-prostymi-slovami" target="_blank" rel="nofollow"></a>
	<p>Наш канал</p>
	<a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a>
	</li>
	</ul>
</td><td class="content" valign="top">
	<ul class="breadcrumbs">
	<li><a href="https://proproprogs.ru/index.php">Главная</a></li>
	<li><a href="https://proproprogs.ru/python_oop">Python ООП</a></li>
	<li class="last">Свойства и методы класса</li>
	</ul>

	<div class="content-text"><h1>Концепция ООП простыми словами</h1>

  	<div class="container"><div class="video_button">
	<a href="https://www.youtube.com/watch?v=Z7AY41tE-3U&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank" rel="nofollow">
	<div class="title">Смотреть материал на видео</div>
	</a>
</div>

<p>У многих
начинающих программистов концепция ООП вызывает недоумение и вопрос: зачем она
нужна? Я же уже умею писать программы: оперировать данными, создавать циклы,
прописывать условия, вызывать функции и тем самым писать программы практически
любой сложности? Разве этого мало? Этого было достаточно до 1960-x гг. когда, в
общем то и зародилась эта концепция ООП. Даже можно сказать, что вплоть до
начала 1990-х программисты могли свободно обходиться без ООП, пока оно не стало
доминирующим направлением и внедрено в самый популярный (на тот момент) язык
программирования С++. Так что же это такое и почему сейчас знать ООП должен
каждый, уважающий себя, начинающий программист?

</p><p>Я постараюсь
ответить на все эти вопросы, не прибегая к конкретному языку программирования,
то есть, в целом разъяснить концепцию ООП – общую для всех языков
программирования. И начну с того, что почти всегда в программах мы оперируем
объектами данных. Например, создается программа по учету животных, в частности,
котов и кошек. Значит, здесь мы имеем дело с объектом коты (Cats). И было бы
хорошо все данные, связанные с котами, представлять в программе как единое
целое. Как раз это можно сделать с помощью класса:

</p><p align="center"><img id="Рисунок 1" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/image001.png" width="231" height="187">

</p><p>Здесь класс
можно воспринимать, как шаблон, по которому будут формироваться данные о котах.
В этом шаблоне есть три свойства: порода, имя и возраст. Программист сам решает,
сколько и какие свойства будет содержать класс. Я решил, для примера, пусть
будут такие. А вот конкретные коты – это объекты данного класса:

</p><p align="center"><img id="Рисунок 10" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/image002.jpg" width="624" height="167">

</p><p>И таких объектов
может быть множество. То есть, объекты создаются по образу и подобию шаблона –
класса, в данном случае Cats. Далее в программе мы можем работать с
этими объектами-котами, как с единым целым. 

</p><p>Вообще, класс
может содержать не только свойства, то есть, данные, но и методы – набор
функций, определенные для работы с классом и его объектами. То есть, класс
может описывать некий алгоритм, фрагмент программы, присущий именно этому
объекту. Например, в классе можно определить метод (функцию), которая бы
рисовала кота на экране устройства. Пусть, для примера, она называется draw():

</p><p align="center"><img id="Рисунок 11" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/image003.png" width="230" height="232">

</p><p>Тогда у каждого
объекта этого класса можно будет вызывать метод draw() и на экране
будет рисоваться соответствующий кот. Видите, как удобно можно оперировать
объектами на уровне классов. И это только начало.

</p><p>Разумеется,
таких методов в классах может быть сколько угодно. И они, как правило, имеют
доступ ко всем свойствам текущего класса и объекта. В результате, в рамках
одного класса можно сформировать полноценную программу, которая часто работает независимо
в каждом объекте этого класса. 

</p><p>Чтобы это было
понятнее, приведу пример из своей практики, когда я впервые применил ООП и был
этим очень доволен. Как то мне понадобилось вывести в одном окне несколько
независимых графиков функций:

</p><p align="center"><img id="Рисунок 12" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/image004.jpg" width="313" height="277">

</p><p>Тогда я
определил класс Graphs для отображения и манипулирования
графиками (перемещение, изменение масштаба и прочее). А, затем, каждый
конкретный график стал просто объектом этого класса.

</p><p align="center"><img id="Рисунок 13" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/image005.png" width="230" height="158">

</p><p>Благодаря этому,
у меня в программе один блок кода отвечал за независимое отображение сразу
нескольких графиков в окне программы. И это было здорово!

</p><h2>Инкапсуляция</h2>

<p>Итак, мы теперь представляем
себе, что такое класс и что такое объекты класса. Сделаем следующий шаг и
отметим, что класс вообще должен восприниматься как единая, целостная
конструкция, все внутренние манипуляции с его данными должны быть сокрыты в
этом классе и в идеале недоступны извне. То есть, программисты, использующие
его, не могли бы обращаться ко всем его данным и методам, а только к некоторым
– разрешенным. 

</p><p>Это, как с
реальными вещами. Например, когда мы покупаем автомобиль, то нам важно как им
управлять, какие у него характеристики, но совершенно не имеет значения, как
работает двигатель, почему крутятся колеса, из чего сделаны стекла, как взаимодействуют
между собой все его агрегаты и прочее и прочее. Пользователю автомобиля
главное, чтобы он безупречно работал и довозил его с комфортом из п. А в п. Б.

</p><p align="center"><img id="Рисунок 14" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/image006.png" width="260" height="210">

</p><p>То есть, машина
в целом, это некая капсула, которая внутри себя скрывает огромное количество разных
узлов, взаимодействующих между собой. И, в идеале, нам совершенно не важен их
внутренний алгоритм функционирования. Важен конечный результат – завели и
поехали!

</p><p>Та же идея
заложена и в классах. Они вроде капсулы, которая содержит в себе данные и методы,
которые и определяют внутренний алгоритм функционирования данного класса:

</p><p align="center"><img id="Рисунок 15" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/image007.png" width="260" height="173">

</p><p>И чтобы
пользователь класса не мог случайно или намеренно вмешаться в его внутреннюю
работу, данные и методы можно скрывать. То есть, к скрытым данным и методам
нельзя напрямую обращаться извне, только внутри класса. Такой механизм в ООП
называется <b>инкапсуляцией</b>. Благодаря инкапсуляции класс становится единым
целым, а работа с ним возможна только через разрешенные (публичные) свойства и
методы.

</p><p>Например, в
автомобиле такие разрешенные методы – это руль, коробка передач, педали газа и
тормоза и прочее, чем мы можем управлять во время движения. А все остальное,
лишнее для нас, скрыто внутри. И по большому счету, нам не важно, как именно
достигается результат, главное, чтобы ехали! Это и есть идея инкапсуляции в
ООП.

</p><h2>Наследование</h2>

<p>Следующая важная
идея ООП – наследование классов. Наследование позволяет как бы вынести «за
скобки» общее для разных классов. Я часто здесь привожу пример с разработкой
графического редактора, в котором можно рисовать графические примитивы: линии,
прямоугольники, эллипсы и другие фигуры. С точки зрения ООП каждый такой
примитив удобно представить своим классом:

</p><p align="center"><img id="Рисунок 16" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/image008.jpg" width="623" height="133">

</p><p>Но, очевидно, в
этих классах будут общие свойства: coords, width и color. Получаем
дублирование кода, то есть, нарушение принципа DRY – не
повторяйся. Именно эти общие свойства целесообразно вынести в общий для всех них
базовый класс Figure:

</p><p align="center"><img id="Рисунок 17" src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/image009.png" width="260" height="172">

</p><p>Но, чтобы данные
и методы класса Figure появлялись в дочерних классах Line, Rect и Ellipse, необходимо
унаследовать их от класса Figure. То есть, благодаря механизму
наследования классов, мы можем использовать ранее созданные классы и расширять
их функциональность. В нашем примере, есть класс Figure, который только
хранит данные. А унаследованные, дочерние классы расширяют его функциональность
и выполняют рисование конкретных графических примитивов.

</p><h2>Полиморфизм</h2>

<p>Наконец,
последняя важная концепция ООП – полиморфизм. Это необычное слово,
применительно к классам и объектам означает, что мы можем единым образом
работать с разными типами данных. Вообще, в программировании различают два вида
полиморфизма. Это, так называемый, Ad hoc полиморфизм и
параметрический полиморфизм. Первый, Ad hoc существовал еще
до появления ООП и реализовывался через перегрузку функций и приведение
различных типов данных.

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">double <span style="color: #008000;">abs</span><span style="color: black;">(</span>double x<span style="color: black;">)</span> <span style="color: black;">{</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: black;">(</span>x <span style="color: #66cc66;">&lt;</span> <span style="color: #ff4500;">0</span><span style="color: black;">)</span> ? –x : x 
<span style="color: black;">}</span>
&nbsp;
<span style="color: #008000;">int</span> <span style="color: #008000;">abs</span><span style="color: black;">(</span><span style="color: #008000;">int</span> x<span style="color: black;">)</span> <span style="color: black;">{</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: black;">(</span>x <span style="color: #66cc66;">&lt;</span> <span style="color: #ff4500;">0</span><span style="color: black;">)</span> ? –x : x 
<span style="color: black;">}</span></pre></div></div>

<p>Я не буду на нем
подробно останавливаться, тем более, что в Python он не
используется. А вот второй, параметрический, это очень классная вещь. 

</p><p>Я снова вернусь
к примеру с графическим редактором, где у нас было три класса с одним базовым Figure. В базовый
класс я также добавил метод draw() и вы сейчас поймете почему. Допустим,
что для каждого класса были созданы объекты. И наша задача их нарисовать в окне
программы. Для этого есть метод draw(), который существует в каждом дочернем
классе: Line, Rect и Ellipse. Так вот, если
бы не было полиморфизма, то мы в программе должны были бы сначала перебрать
список из объектов Line, затем, список из объектов Rect и наконец, из
объектов Ellipse. Очевидно, это
не лучший подход. Представьте, что в будущем у нас будут появляться все новые и
новые виды графический примитивов, например, треугольник, пятиугольник,
трапеция и т.п. Тогда списков разных типов объектов будет все больше и больше,
а программа все сложнее и сложнее. Да и, кроме того, появится дублирование
кода. 

</p><p>Но, благодаря
параметрическому полиморфизму, мы можем оперировать разными типами объектов
через их единый базовый класс, в нашем случае Figure. Достаточно
создать список, каждый элемент которого будет иметь тип Figure и через ссылку
на базовый класс вызывать функцию draw(). Причем
автоматически будет вызван метод draw() соответствующего дочернего класса. Так
устроено наследование в ООП. В результате, мы имеем единый интерфейс – класс Figure для управления
самыми разными типами графических примитивов. Причем, в будущем в программу
можно добавлять новые графические классы, просто унаследовав их от Figure и они
автоматически будут встраиваться в общую логику работы программы. И это
невероятно удобная вещь! Благодаря наследованию и полиморфизму мы можем на
уровне ООП описывать общую, абстрактную архитектуру работы программы в целом, а
потом, создавая дочерние классы, наполнять эту программу конкретным содержимым,
конкретным поведением. Это буквально переносит нас на совершенно другой, более
высокий уровень программирования – целостного, абстрактного описания
информационных потоков наших приложений. Поэтому не случайно большинство
современных паттернов проектирования основаны именно на концепции ООП. Без нее
общее описание программных конструкций было бы очень непростым занятием для
программистов.

</p><h2>Заключение</h2>

<p>Вот что в целом
из себя представляет концепция ООП, состоящая из трех главных элементов:

</p><ul>
<li>
инкапсуляция;

</li><li>
наследование;

</li><li>
полиморфизм.
</li></ul>

<p>Все это мы будем
подробно рассматривать в курсе по ООП на Python. Познакомимся
со способами программной реализации каждого компонента. И в итоге, вы сможете
использовать всю мощь ООП в своих реализациях! Поехали!
</p><div class="video_container">
	<h3 class="video_title">Видео по теме</h3>
	<div class="video_list">
		<div class="video_item">
	<a href="https://www.youtube.com/watch?v=Z7AY41tE-3U&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_024.jpg"></div>
	<p class="video_item_title">Концепция ООП простыми словами</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=P4CNNo8jWj4&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_037.jpg"></div>
	<p class="video_item_title">#1. Классы и объекты. Атрибуты классов и объектов</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=Lw8TeLS4_IA&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_013.jpg"></div>
	<p class="video_item_title">#2. Методы классов. Параметр self</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=-J3Ou8-8vVk&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_022.jpg"></div>
	<p class="video_item_title">#3. Инициализатор __init__ и финализатор __del__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=-xoT6rntpK0&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_006.jpg"></div>
	<p class="video_item_title">#4. Магический метод __new__. Пример паттерна Singleton</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=78PTvj2wYH8&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_021.jpg"></div>
	<p class="video_item_title">#5. Методы класса (classmethod) и статические методы (staticmethod)</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=RipfqbH0eqY&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_026.jpg"></div>
	<p class="video_item_title">#6. Режимы доступа public, private, protected. Сеттеры и геттеры</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=CAx-NLFc-Z4&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_019.jpg"></div>
	<p class="video_item_title">#7. Магические методы __setattr__, __getattribute__, __getattr__ и __delattr__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=WNj55JzXnvc&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_032.jpg"></div>
	<p class="video_item_title">#8. Паттерн Моносостояние</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=MxviMwbGl3I&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_030.jpg"></div>
	<p class="video_item_title">#9. Свойства property. Декоратор @property</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=ury9pdPXa6s&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_018.jpg"></div>
	<p class="video_item_title">#10. Пример использования объектов property</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=ACqsYPbgePk&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_033.jpg"></div>
	<p class="video_item_title">#11. Дескрипторы (data descriptor и non-data descriptor)</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=UqX5Qekb9sU&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_025.jpg"></div>
	<p class="video_item_title">#12. Магический метод __call__. Функторы и классы-декораторы</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=Aabdr3yxEhQ&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_023.jpg"></div>
	<p class="video_item_title">#13. Магические методы __str__, __repr__, __len__, __abs__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=OMMQ1ZNKK6Q&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_029.jpg"></div>
	<p class="video_item_title">#14 Магические методы __add__, __sub__, __mul__, __truediv__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=l3jMyZKDxXE&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_015.jpg"></div>
	<p class="video_item_title">#15. Методы сравнений __eq__, __ne__, __lt__, __gt__ и другие</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=Cfx4VCnWeCE&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_035.jpg"></div>
	<p class="video_item_title">#16. Магические методы __eq__ и __hash__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=a2L5vyCUvzo&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_039.jpg"></div>
	<p class="video_item_title">#17. Магический метод __bool__ определения правдивости объектов</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=EAoiOwYQSuY&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_027.jpg"></div>
	<p class="video_item_title">#18. Магические методы __getitem__, __setitem__ и __delitem__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=SDJ-Vmf_pxk&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_009.jpg"></div>
	<p class="video_item_title">#19. Магические методы __iter__ и __next__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=7WVYqjdMa6U&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default.jpg"></div>
	<p class="video_item_title">#20. Наследование в объектно-ориентированном программировании</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=JTmb2QHZUGg&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_010.jpg"></div>
	<p class="video_item_title">#21. Функция issubclass(). Наследование от встроенных типов и от object</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=BTV9esoCwEE&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_007.jpg"></div>
	<p class="video_item_title">#22. Наследование. Функция super() и делегирование</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=zHgPAm-imvY&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_031.jpg"></div>
	<p class="video_item_title">#23. Наследование. Атрибуты private и protected</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=fzUI3NyJflw&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_020.jpg"></div>
	<p class="video_item_title">#24. Полиморфизм и абстрактные методы</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=9YPooWY6x9o&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_038.jpg"></div>
	<p class="video_item_title">#25. Множественное наследование</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=Cz-grBsGGkQ&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_004.jpg"></div>
	<p class="video_item_title">#26. Коллекция __slots__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=7xXPuIdfoUU&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_002.jpg"></div>
	<p class="video_item_title">#27. Как работает __slots__ с property и при наследовании</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=MFIlltaeIgs&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_005.jpg"></div>
	<p class="video_item_title">#28. Введение в обработку исключений. Блоки try / except</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=3DmzotEptvM&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_016.jpg"></div>
	<p class="video_item_title">#29. Обработка исключений. Блоки finally и else</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=jVHvFxmiLmI&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_034.jpg"></div>
	<p class="video_item_title">#30. Распространение исключений (propagation exceptions)</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=XR-16WMXZOY&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_040.jpg"></div>
	<p class="video_item_title">#31. Инструкция raise и пользовательские исключения</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=FkhnVkl0EgM&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_003.jpg"></div>
	<p class="video_item_title">#32. Менеджеры контекстов. Оператор with</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=2T83JhAeC6U&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_012.jpg"></div>
	<p class="video_item_title">#33. Вложенные классы</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=tp_cGBN_SQA&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_011.jpg"></div>
	<p class="video_item_title">#34. Метаклассы. Объект type</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=_A90qAV_P5U&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_008.jpg"></div>
	<p class="video_item_title">#35. Пользовательские метаклассы. Параметр metaclass</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=JlMfyDlV_7A&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_028.jpg"></div>
	<p class="video_item_title">#36. Метаклассы в API ORM Django</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=SR6AI7ovZQE&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_017.jpg"></div>
	<p class="video_item_title">#37. Введение в Python Data Classes (часть 1)</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=0yOWSxRzSlU&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_036.jpg"></div>
	<p class="video_item_title">#38. Введение в Python Data Classes (часть 2)</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=iH9kwFJoK-o&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%D0%9A%D0%BE%D0%BD%D1%86%D0%B5%D0%BF%D1%86%D0%B8%D1%8F%20%D0%9E%D0%9E%D0%9F%20%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%8B%D0%BC%D0%B8%20%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Python%20%D0%9E%D0%9E%D0%9F_files/default_014.jpg"></div>
	<p class="video_item_title">#39. Python Data Classes при наследовании</p>
	</a>
</div>

	</div>
</div></div>

	<ul class="control">
<li class="last"><a href="https://proproprogs.ru/python_oop/klassy-i-obekty-atributy-klassov-i-obektov">Следующая</a></li></ul><div class="clear"></div>

</div></td></tr></tbody></table>
</td></tr>
<tr><td valign="top">
	<div id="footer">
		<p>© 2023 Частичное или полное копирование информации с данного сайта 
для распространения на других ресурсах, в том числе и бумажных, строго 
запрещено. Все тексты и изображения являются собственностью сайта</p>
		<p><a href="https://proproprogs.ru/confidencial">Политика конфиденциальности</a> | <a href="https://proproprogs.ru/terms">Пользовательское соглашение</a>
	</p></div>
</td></tr></tbody></table>


</body></html>