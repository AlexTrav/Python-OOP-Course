<!DOCTYPE html>
<html><head>
	<!-- base href="https://proproprogs.ru/" -->
	<title>#19. Магические методы __iter__ и __next__ | Python ООП</title>
	<meta name="yandex-verification" content="dc612d99275111ce">
	<meta name="google-site-verification" content="dBeU07wRdu1RPn01tUx7i7POaYp6QVgQiuCLHWLHudM">
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<link rel="shortcut icon" href="https://proproprogs.ru/images/main.ico" type="image/x-icon">
	<script async="" src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/tag.js"></script><script type="text/javascript" src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/jquery-1.9.0.min.js"></script>
	<link rel="stylesheet" href="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/fonts.css">
	<link type="text/css" href="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/styles.css" rel="stylesheet">
	<link type="text/css" href="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/video.css" rel="stylesheet">
	<meta name="description" content="Создаем итерируемые объекты с помощью магических методов __iter__() и __next__().">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
<script>
function onShowMobileMenu() {
	let m = $('#topmenu-toggle');
	if( m.is(":visible") ) m.hide();
	else m.show();
}
</script>

<table class="table-page" cellspacing="0" cellpadding="0" border="0">
<tbody><tr><td valign="top">
		<div class="header">
			<ul class="mainmenu-mobile">
			<li class="logo"><a href="https://proproprogs.ru/index.php"><div class="logo"></div></a></li>
			<li class="last"><a href="javascript:onShowMobileMenu()"><div class="mobile-menu-img"></div></a></li>
			</ul>

			<ul id="mainmenu" class="mainmenu">
			<li class="logo"><a href="https://proproprogs.ru/index.php"><div class="logo"></div></a></li>
			<li><a href="https://proproprogs.ru/python">Python</a></li><li><a href="https://proproprogs.ru/js">JavaScript</a></li><li><a href="https://proproprogs.ru/java">Java</a></li><li><a href="https://proproprogs.ru/data">Обработка данных</a></li><li><a href="https://proproprogs.ru/else">Еще</a></li>
			<li class="last"><a href="mailto:sc_lib@list.ru">sc_lib@list.ru</a></li>
			</ul>
			<div class="clear"></div>
		</div>
		<div class="topmenu-toggle" id="topmenu-toggle">
			<ul class="mobile-list"><li><a href="https://proproprogs.ru/python">Python</a></li><ul class="mobile-list-expand"><li><a href="https://proproprogs.ru/python_base">Основы Python</a></li><li><a href="https://proproprogs.ru/python_oop">Python ООП</a></li><li><a href="https://proproprogs.ru/wxpython">wxPython</a></li><li><a href="https://proproprogs.ru/modules">Модули</a></li><li><a href="https://proproprogs.ru/flask">Flask</a></li><li><a href="https://proproprogs.ru/django">Django</a></li></ul><li><a href="https://proproprogs.ru/js">JavaScript</a></li><ul class="mobile-list-expand"><li><a href="https://proproprogs.ru/javascript">Основы JavaScript</a></li><li><a href="https://proproprogs.ru/javascript_dom">JavaScript DOM</a></li><li><a href="https://proproprogs.ru/javascript_oop">JavaScript ООП</a></li></ul><li><a href="https://proproprogs.ru/java">Java</a></li><ul class="mobile-list-expand"><li><a href="https://proproprogs.ru/java_base">Основы Java</a></li><li><a href="https://proproprogs.ru/java_oop">Java ООП</a></li></ul><li><a href="https://proproprogs.ru/data">Обработка данных</a></li><ul class="mobile-list-expand"><li><a href="https://proproprogs.ru/neural_network">Нейронные сети</a></li><li><a href="https://proproprogs.ru/dsp">ЦОС</a></li><li><a href="https://proproprogs.ru/fractals">Фракталы</a></li><li><a href="https://proproprogs.ru/ga">Генетические алгоритмы</a></li><li><a href="https://proproprogs.ru/tensorflow">Tensorflow</a></li><li><a href="https://proproprogs.ru/ml">ML</a></li></ul><li><a href="https://proproprogs.ru/else">Еще</a></li><ul class="mobile-list-expand"><li><a href="https://proproprogs.ru/structure_data">Структуры данных</a></li></ul></ul>
		</div>
<!-- Yandex.Metrika counter -->
<script type="text/javascript">
   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
   m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

   ym(61572289, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
   });
</script>
<noscript><div><img src="https://mc.yandex.ru/watch/61572289" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->
<table class="table-content" cellspacing="0" cellpadding="0" border="0">
<tbody><tr><td class="left-chapters" valign="top">
	<ul id="leftchapters">
	<li>Магические методы классов</li>
	<li><a href="https://proproprogs.ru/python_oop/magicheskiy-metod-call-funktory-i-klassy-dekoratory">Магический метод __call__. Функторы и классы-декораторы</a></li><li><a href="https://proproprogs.ru/python_oop/magicheskie-metody-str-repr-len-abs">Магические методы __str__, __repr__, __len__, __abs__</a></li><li><a href="https://proproprogs.ru/python_oop/magicheskie-metody-add-sub-mul-truediv">Магические методы __add__, __sub__, __mul__, __truediv__</a></li><li><a href="https://proproprogs.ru/python_oop/metody-sravneniy-eq-ne-lt-gt">Методы сравнений __eq__, __ne__, __lt__, __gt__ и другие</a></li><li><a href="https://proproprogs.ru/python_oop/magicheskie-metody-eq-hash">Магические методы __eq__ и __hash__</a></li><li><a href="https://proproprogs.ru/python_oop/magicheskiy-metod-bool-opredeleniya-pravdivosti-obektov">Магический метод __bool__ определения правдивости объектов</a></li><li><a href="https://proproprogs.ru/python_oop/magicheskie-metody-getitem-setitem-delitem">Магические методы __getitem__, __setitem__ и __delitem__</a></li><li class="selected">Магические методы __iter__ и __next__</li>
	<li class="share">
	<p>Поделиться</p>
	<a class="share-vk" href="https://vk.com/share.php?url=https://proproprogs.ru/python_oop/magicheskie-metody-iter-next" target="_blank" rel="nofollow"></a>
	<a class="share-tw" href="https://twitter.com/intent/tweet?url=https://proproprogs.ru/python_oop/magicheskie-metody-iter-next" target="_blank" rel="nofollow"></a>
	<p>Наш канал</p>
	<a class="share-yt" href="https://www.youtube.com/channel/UClJzWfGWuGJL2t-3dYKcHTA/playlists" target="_blank" rel="nofollow"></a>
	</li>
	</ul>
</td><td class="content" valign="top">
	<ul class="breadcrumbs">
	<li><a href="https://proproprogs.ru/index.php">Главная</a></li>
	<li><a href="https://proproprogs.ru/python_oop">Python ООП</a></li>
	<li class="last">Магические методы классов</li>
	</ul>

	<div class="content-text"><h1>Магические методы __iter__ и __next__</h1>

  	<div class="container"><div class="video_button">
	<a href="https://www.youtube.com/watch?v=SDJ-Vmf_pxk&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank" rel="nofollow">
	<div class="title">Смотреть материал на видео</div>
	</a>
</div>

<p>Я Сергей
Балакирев и на этом занятии мы будем говорить о методах:

</p><ul>
<li> __iter__(self) – получение
итератора для перебора объекта;

</li><li> __next__(self) –
переход к следующему значению и его считывание.
</li></ul>

<p>Давайте
разберемся для чего они нужны и как их можно использовать. Вы все знаете, как
работает функция range(). Она выдает значения арифметической
прогрессии, например:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;"><span style="color: #008000;">list</span><span style="color: black;">(</span><span style="color: #008000;">range</span><span style="color: black;">(</span><span style="color: #ff4500;">5</span><span style="color: black;">)</span><span style="color: black;">)</span></pre></div></div>

<p>дает
последовательность целых чисел от 0 до 4. Перебрать значения объекта range также можно
через итератор:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">a <span style="color: #66cc66;">=</span> <span style="color: #008000;">iter</span><span style="color: black;">(</span><span style="color: #008000;">range</span><span style="color: black;">(</span><span style="color: #ff4500;">5</span><span style="color: black;">)</span><span style="color: black;">)</span>
next<span style="color: black;">(</span>a<span style="color: black;">)</span>
next<span style="color: black;">(</span>a<span style="color: black;">)</span>
…</pre></div></div>

<p>В конце
генерируется исключение StopIteration. Так вот, мы
можем создать подобный объект, используя магические методы __iter__ и __next__. Давайте это
сделаем для объекта frange, который будет выдавать
последовательность вещественных чисел арифметической прогрессии. Для этого я
объявлю класс:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">class</span> FRange:
&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">def</span> <span style="color: #0000cd;">__init__</span><span style="color: black;">(</span><span style="color: #008000;">self</span><span style="color: #66cc66;">,</span> start<span style="color: #66cc66;">=</span><span style="color: #ff4500;">0.0</span><span style="color: #66cc66;">,</span> stop<span style="color: #66cc66;">=</span><span style="color: #ff4500;">0.0</span><span style="color: #66cc66;">,</span> step<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1.0</span><span style="color: black;">)</span>:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #008000;">self</span>.<span style="color: black;">start</span> <span style="color: #66cc66;">=</span> start
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #008000;">self</span>.<span style="color: black;">stop</span> <span style="color: #66cc66;">=</span> stop
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #008000;">self</span>.<span style="color: black;">step</span> <span style="color: #66cc66;">=</span> step
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #008000;">self</span>.<span style="color: black;">value</span> <span style="color: #66cc66;">=</span> <span style="color: #008000;">self</span>.<span style="color: black;">start</span> - <span style="color: #008000;">self</span>.<span style="color: black;">step</span></pre></div></div>

<p>Здесь в
инициализатор мы передаем начальное значение прогрессии, конечное и шаг
изменения. Также формируем свойство value, которое будет
представлять собой текущее значение для считывания.

</p><p>Для перебора
элементов добавим в этот класс метод, который будет соответствовать магическому
методу __next__:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">def</span> __next__<span style="color: black;">(</span><span style="color: #008000;">self</span><span style="color: black;">)</span>:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #008000;">self</span>.<span style="color: black;">value</span> + <span style="color: #008000;">self</span>.<span style="color: black;">step</span> <span style="color: #66cc66;">&lt;</span> <span style="color: #008000;">self</span>.<span style="color: black;">stop</span>:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #008000;">self</span>.<span style="color: black;">value</span> +<span style="color: #66cc66;">=</span> <span style="color: #008000;">self</span>.<span style="color: black;">step</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #008000;">self</span>.<span style="color: black;">value</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">else</span>:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">raise</span> <span style="color: #008000;">StopIteration</span></pre></div></div>

<p>В этом методе мы
увеличиваем значение value на шаг step и возвращаем до
тех пор, пока не достигли значения stop (не включая
его). При достижении конца генерируем исключение StopIteration, ровно так, как
это делает объект range. 

</p><p>Сформируем
объект этого класса:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">fr <span style="color: #66cc66;">=</span> FRange<span style="color: black;">(</span><span style="color: #ff4500;">0</span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">0.5</span><span style="color: black;">)</span></pre></div></div>

<p>и четыре раза
вызовем метод __next__()

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>fr.__next__<span style="color: black;">(</span><span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>fr.__next__<span style="color: black;">(</span><span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>fr.__next__<span style="color: black;">(</span><span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>fr.__next__<span style="color: black;">(</span><span style="color: black;">)</span><span style="color: black;">)</span></pre></div></div>

<p>Видим четыре
значения нашей арифметической прогрессии. Если вызвать __next__() еще раз:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>fr.__next__<span style="color: black;">(</span><span style="color: black;">)</span><span style="color: black;">)</span></pre></div></div>

<p>получим
исключение StopIteration. В целом получился
неплохой учебный пример. В действительности, благодаря определению магического
метода __next__ в классе FRange, мы можем
применять функцию next() для перебора значений его объектов:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">fr <span style="color: #66cc66;">=</span> FRange<span style="color: black;">(</span><span style="color: #ff4500;">0</span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">0.5</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>fr<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>fr<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>fr<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>fr<span style="color: black;">)</span><span style="color: black;">)</span></pre></div></div>

<p>Здесь функция next() вызывает
метод __next__ и
возвращенное им значение, возвращается функцией next(). При этом, в
качестве аргумента мы ей передаем экземпляр самого класса. То есть, объект
класса выступает в роли итератора. В нашем случае так и задумывалось. Однако,
перебрать объект fr с помощью цикла for не получится:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">for</span> x <span style="color: #ff7700;font-weight:bold;">in</span> fr:
&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>x<span style="color: black;">)</span></pre></div></div>

<p>Появится ошибка,
что объект не итерируемый. Почему? Ведь мы прописали поведение функции next()? Этого не
достаточно. Необходимо еще, чтобы объект возвращал итератор при вызове функции iter:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">it <span style="color: #66cc66;">=</span> <span style="color: #008000;">iter</span><span style="color: black;">(</span>fr<span style="color: black;">)</span></pre></div></div>

<p>Для этого в
классе нужно прописать еще один магический метод __iter__. В нашем
примере он будет выглядеть, так:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">def</span> <span style="color: #0000cd;">__iter__</span><span style="color: black;">(</span><span style="color: #008000;">self</span><span style="color: black;">)</span>:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #008000;">self</span>.<span style="color: black;">value</span> <span style="color: #66cc66;">=</span> <span style="color: #008000;">self</span>.<span style="color: black;">start</span> - <span style="color: #008000;">self</span>.<span style="color: black;">step</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #008000;">self</span></pre></div></div>

<p>Мы здесь
устанавливаем начальное значение value и возвращаем ссылку на объекта класса,
так как этот объект в нашем примере и есть итератор – через него вызывается
магический метод __next__.

</p><p>Теперь, после
запуска программы у нас не возникает никаких ошибок и цикл for перебирает
значения объекта fr. То же самое мы можем сделать и через next():

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">fr <span style="color: #66cc66;">=</span> FRange<span style="color: black;">(</span><span style="color: #ff4500;">0</span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">0.5</span><span style="color: black;">)</span>
it <span style="color: #66cc66;">=</span> <span style="color: #008000;">iter</span><span style="color: black;">(</span>fr<span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span></pre></div></div>

<p>Как вы помните,
цикл for именно так и
перебирает итерируемые объекты, сначала неявно вызывает функцию iter(), а затем, на
каждой итерации – функцию next(), пока не возникнет исключение StopIteration. Кроме того,
благодаря магическому методу __iter__ мы теперь можем обходить значения
объекта fr много раз с
самого начала, например:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">it <span style="color: #66cc66;">=</span> <span style="color: #008000;">iter</span><span style="color: black;">(</span>fr<span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span>
&nbsp;
it <span style="color: #66cc66;">=</span> <span style="color: #008000;">iter</span><span style="color: black;">(</span>fr<span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span>
<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>next<span style="color: black;">(</span>it<span style="color: black;">)</span><span style="color: black;">)</span></pre></div></div>

<p>Таким образом,
сформировали класс FRange, который воспринимается как итерируемый
объект с возможностью перебора функцией next() или циклом for. 

</p><p>В заключение
этого занятия я приведу пример еще одного класса FRange2D для формирования
таблиц значений:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">class</span> FRange2D:
&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">def</span> <span style="color: #0000cd;">__init__</span><span style="color: black;">(</span><span style="color: #008000;">self</span><span style="color: #66cc66;">,</span> start<span style="color: #66cc66;">=</span><span style="color: #ff4500;">0.0</span><span style="color: #66cc66;">,</span> stop<span style="color: #66cc66;">=</span><span style="color: #ff4500;">0.0</span><span style="color: #66cc66;">,</span> step<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1.0</span><span style="color: #66cc66;">,</span> rows<span style="color: #66cc66;">=</span><span style="color: #ff4500;">5</span><span style="color: black;">)</span>:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #008000;">self</span>.<span style="color: black;">fr</span> <span style="color: #66cc66;">=</span> FRange<span style="color: black;">(</span>start<span style="color: #66cc66;">,</span> stop<span style="color: #66cc66;">,</span> step<span style="color: black;">)</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #008000;">self</span>.<span style="color: black;">rows</span> <span style="color: #66cc66;">=</span> rows</pre></div></div>

<p>Здесь в
инициализаторе создается одномерный объект FRange, который будет
формировать строки таблицы. Параметр rows – число строк.
Далее, пропишем два магических метода __iter__ и __next__, следующим
образом:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">def</span> <span style="color: #0000cd;">__iter__</span><span style="color: black;">(</span><span style="color: #008000;">self</span><span style="color: black;">)</span>:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #008000;">self</span>.<span style="color: black;">value_row</span> <span style="color: #66cc66;">=</span> <span style="color: #ff4500;">0</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #008000;">self</span>
&nbsp;
&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">def</span> __next__<span style="color: black;">(</span><span style="color: #008000;">self</span><span style="color: black;">)</span>:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: #008000;">self</span>.<span style="color: black;">value_row</span> <span style="color: #66cc66;">&lt;</span> <span style="color: #008000;">self</span>.<span style="color: black;">rows</span>:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #008000;">self</span>.<span style="color: black;">value_row</span> +<span style="color: #66cc66;">=</span> <span style="color: #ff4500;">1</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #008000;">iter</span><span style="color: black;">(</span><span style="color: #008000;">self</span>.<span style="color: black;">fr</span><span style="color: black;">)</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">else</span>:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">raise</span> <span style="color: #008000;">StopIteration</span></pre></div></div>

<p>Обратите
внимание, что метод __next__ возвращает не конкретное значение, а
итератор на объект класса FRange. Сейчас вы поймете почему так.
Создадим объект класса FRange2D:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;">fr <span style="color: #66cc66;">=</span> FRange2D<span style="color: black;">(</span><span style="color: #ff4500;">0</span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">2</span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">0.5</span><span style="color: #66cc66;">,</span> <span style="color: #ff4500;">4</span><span style="color: black;">)</span></pre></div></div>

<p>и для перебора
его значений нам понадобятся два цикла for:

</p><div class="highlight"><div class="block"><pre class="python" style="font-family:monospace;"><span style="color: #ff7700;font-weight:bold;">for</span> row <span style="color: #ff7700;font-weight:bold;">in</span> fr:
&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">for</span> x <span style="color: #ff7700;font-weight:bold;">in</span> row:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span>x<span style="color: #66cc66;">,</span> end<span style="color: #66cc66;">=</span><span style="color: #483d8b;">" "</span><span style="color: black;">)</span>
&nbsp;&nbsp;&nbsp; <span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">(</span><span style="color: black;">)</span></pre></div></div>

<p>Первый цикл
перебирает первый итератор – объект класса FRange2D и на каждой
итерации возвращает итератор объекта класса FRange. Именно поэтому
мы в методе __next__ класса FRange2D возвращаем
иетратор, иначе бы не смогли перебирать объект row во вложенном
цикле for.

</p><p>После запуска
программы увидим на экране следующую таблицу чисел:

</p><p>0.0 0.5 1.0 1.5 
<br>0.0 0.5 1.0 1.5 
<br>0.0 0.5 1.0 1.5 
<br>0.0 0.5 1.0 1.5

</p><p>Вот общий
принцип создания итерируемых объектов. Надеюсь, эти примеры вам были понятны и
вы теперь знаете, как и для чего используются магические методы __iter__ и __next__.
</p><div class="video_container">
	<h3 class="video_title">Видео по теме</h3>
	<div class="video_list">
		<div class="video_item">
	<a href="https://www.youtube.com/watch?v=Z7AY41tE-3U&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_031.jpg"></div>
	<p class="video_item_title">Концепция ООП простыми словами</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=P4CNNo8jWj4&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_006.jpg"></div>
	<p class="video_item_title">#1. Классы и объекты. Атрибуты классов и объектов</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=Lw8TeLS4_IA&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_021.jpg"></div>
	<p class="video_item_title">#2. Методы классов. Параметр self</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=-J3Ou8-8vVk&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_029.jpg"></div>
	<p class="video_item_title">#3. Инициализатор __init__ и финализатор __del__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=-xoT6rntpK0&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_005.jpg"></div>
	<p class="video_item_title">#4. Магический метод __new__. Пример паттерна Singleton</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=78PTvj2wYH8&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_014.jpg"></div>
	<p class="video_item_title">#5. Методы класса (classmethod) и статические методы (staticmethod)</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=RipfqbH0eqY&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_028.jpg"></div>
	<p class="video_item_title">#6. Режимы доступа public, private, protected. Сеттеры и геттеры</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=CAx-NLFc-Z4&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_026.jpg"></div>
	<p class="video_item_title">#7. Магические методы __setattr__, __getattribute__, __getattr__ и __delattr__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=WNj55JzXnvc&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_038.jpg"></div>
	<p class="video_item_title">#8. Паттерн Моносостояние</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=MxviMwbGl3I&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_036.jpg"></div>
	<p class="video_item_title">#9. Свойства property. Декоратор @property</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=ury9pdPXa6s&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_025.jpg"></div>
	<p class="video_item_title">#10. Пример использования объектов property</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=ACqsYPbgePk&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_039.jpg"></div>
	<p class="video_item_title">#11. Дескрипторы (data descriptor и non-data descriptor)</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=UqX5Qekb9sU&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_032.jpg"></div>
	<p class="video_item_title">#12. Магический метод __call__. Функторы и классы-декораторы</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=Aabdr3yxEhQ&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_030.jpg"></div>
	<p class="video_item_title">#13. Магические методы __str__, __repr__, __len__, __abs__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=OMMQ1ZNKK6Q&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_034.jpg"></div>
	<p class="video_item_title">#14 Магические методы __add__, __sub__, __mul__, __truediv__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=l3jMyZKDxXE&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_012.jpg"></div>
	<p class="video_item_title">#15. Методы сравнений __eq__, __ne__, __lt__, __gt__ и другие</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=Cfx4VCnWeCE&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_010.jpg"></div>
	<p class="video_item_title">#16. Магические методы __eq__ и __hash__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=a2L5vyCUvzo&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_008.jpg"></div>
	<p class="video_item_title">#17. Магический метод __bool__ определения правдивости объектов</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=EAoiOwYQSuY&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_033.jpg"></div>
	<p class="video_item_title">#18. Магические методы __getitem__, __setitem__ и __delitem__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=SDJ-Vmf_pxk&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_017.jpg"></div>
	<p class="video_item_title">#19. Магические методы __iter__ и __next__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=7WVYqjdMa6U&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_011.jpg"></div>
	<p class="video_item_title">#20. Наследование в объектно-ориентированном программировании</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=JTmb2QHZUGg&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_037.jpg"></div>
	<p class="video_item_title">#21. Функция issubclass(). Наследование от встроенных типов и от object</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=BTV9esoCwEE&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_015.jpg"></div>
	<p class="video_item_title">#22. Наследование. Функция super() и делегирование</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=zHgPAm-imvY&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_003.jpg"></div>
	<p class="video_item_title">#23. Наследование. Атрибуты private и protected</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=fzUI3NyJflw&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_002.jpg"></div>
	<p class="video_item_title">#24. Полиморфизм и абстрактные методы</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=9YPooWY6x9o&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_007.jpg"></div>
	<p class="video_item_title">#25. Множественное наследование</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=Cz-grBsGGkQ&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default.jpg"></div>
	<p class="video_item_title">#26. Коллекция __slots__</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=7xXPuIdfoUU&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_004.jpg"></div>
	<p class="video_item_title">#27. Как работает __slots__ с property и при наследовании</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=MFIlltaeIgs&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_009.jpg"></div>
	<p class="video_item_title">#28. Введение в обработку исключений. Блоки try / except</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=3DmzotEptvM&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_023.jpg"></div>
	<p class="video_item_title">#29. Обработка исключений. Блоки finally и else</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=jVHvFxmiLmI&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_040.jpg"></div>
	<p class="video_item_title">#30. Распространение исключений (propagation exceptions)</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=XR-16WMXZOY&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_019.jpg"></div>
	<p class="video_item_title">#31. Инструкция raise и пользовательские исключения</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=FkhnVkl0EgM&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_018.jpg"></div>
	<p class="video_item_title">#32. Менеджеры контекстов. Оператор with</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=2T83JhAeC6U&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_020.jpg"></div>
	<p class="video_item_title">#33. Вложенные классы</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=tp_cGBN_SQA&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_013.jpg"></div>
	<p class="video_item_title">#34. Метаклассы. Объект type</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=_A90qAV_P5U&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_016.jpg"></div>
	<p class="video_item_title">#35. Пользовательские метаклассы. Параметр metaclass</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=JlMfyDlV_7A&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_035.jpg"></div>
	<p class="video_item_title">#36. Метаклассы в API ORM Django</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=SR6AI7ovZQE&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_024.jpg"></div>
	<p class="video_item_title">#37. Введение в Python Data Classes (часть 1)</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=0yOWSxRzSlU&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_022.jpg"></div>
	<p class="video_item_title">#38. Введение в Python Data Classes (часть 2)</p>
	</a>
</div>
<div class="video_item">
	<a href="https://www.youtube.com/watch?v=iH9kwFJoK-o&amp;list=PLA0M1Bcd0w8zPwP7t-FgwONhZOHt9rz9E" target="_blank">
	<div class="thumb"><img src="%2319.%20%D0%9C%D0%B0%D0%B3%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B5%20%D0%BC%D0%B5%D1%82%D0%BE%D0%B4%D1%8B%20__iter__%20%D0%B8%20__next__%20Python%20%D0%9E%D0%9E%D0%9F_files/default_027.jpg"></div>
	<p class="video_item_title">#39. Python Data Classes при наследовании</p>
	</a>
</div>

	</div>
</div></div>

	<ul class="control"><li class="first"><a href="https://proproprogs.ru/python_oop/magicheskie-metody-getitem-setitem-delitem">Предыдущая</a></li>
</ul><div class="clear"></div>

</div></td></tr></tbody></table>
</td></tr>
<tr><td valign="top">
	<div id="footer">
		<p>© 2023 Частичное или полное копирование информации с данного сайта 
для распространения на других ресурсах, в том числе и бумажных, строго 
запрещено. Все тексты и изображения являются собственностью сайта</p>
		<p><a href="https://proproprogs.ru/confidencial">Политика конфиденциальности</a> | <a href="https://proproprogs.ru/terms">Пользовательское соглашение</a>
	</p></div>
</td></tr></tbody></table>


</body></html>